// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyvalueClient is the client API for Keyvalue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyvalueClient interface {
	GetValue(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	StoreKeyValue(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Value, error)
}

type keyvalueClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyvalueClient(cc grpc.ClientConnInterface) KeyvalueClient {
	return &keyvalueClient{cc}
}

func (c *keyvalueClient) GetValue(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/goKeyuery.keyvalue/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyvalueClient) StoreKeyValue(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/goKeyuery.keyvalue/StoreKeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyvalueServer is the server API for Keyvalue service.
// All implementations must embed UnimplementedKeyvalueServer
// for forward compatibility
type KeyvalueServer interface {
	GetValue(context.Context, *Key) (*Value, error)
	StoreKeyValue(context.Context, *KeyValue) (*Value, error)
	mustEmbedUnimplementedKeyvalueServer()
}

// UnimplementedKeyvalueServer must be embedded to have forward compatible implementations.
type UnimplementedKeyvalueServer struct {
}

func (UnimplementedKeyvalueServer) GetValue(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedKeyvalueServer) StoreKeyValue(context.Context, *KeyValue) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKeyValue not implemented")
}
func (UnimplementedKeyvalueServer) mustEmbedUnimplementedKeyvalueServer() {}

// UnsafeKeyvalueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyvalueServer will
// result in compilation errors.
type UnsafeKeyvalueServer interface {
	mustEmbedUnimplementedKeyvalueServer()
}

func RegisterKeyvalueServer(s grpc.ServiceRegistrar, srv KeyvalueServer) {
	s.RegisterService(&Keyvalue_ServiceDesc, srv)
}

func _Keyvalue_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyvalueServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goKeyuery.keyvalue/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyvalueServer).GetValue(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keyvalue_StoreKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyvalueServer).StoreKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goKeyuery.keyvalue/StoreKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyvalueServer).StoreKeyValue(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Keyvalue_ServiceDesc is the grpc.ServiceDesc for Keyvalue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keyvalue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goKeyuery.keyvalue",
	HandlerType: (*KeyvalueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _Keyvalue_GetValue_Handler,
		},
		{
			MethodName: "StoreKeyValue",
			Handler:    _Keyvalue_StoreKeyValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/model.proto",
}
